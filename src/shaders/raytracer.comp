#version 450
#extension GL_ARB_separate_shader_objects : enable
// #extension GL_EXT_debug_printf : enable

// #define WIDTH 800
// #define HEIGHT 600
#define WORKGROUP_SIZE 32

#define EPSILON 0.0001
#define MAXLEN 10000.0

const float INFINITY = 1. / 0.;

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE) in;

struct Pixel{
  vec4 value;
};

// layout(std140, binding = 0) buffer buf
// {
//    Pixel imageData[];
// };

layout (binding = 0, rgba32f) uniform writeonly image2D imageData;

struct Camera 
{
  mat4 inverseTransform;
  float pixelSize;
  float halfWidth;
  float halfHeight;
  int width;
  int height;
};

struct Material {
    vec4 colour;
    float ambient;
    float diffuse;
    float specular;
    float shininess;
//     float reflective;
//     float transparency;
//     float refractiveIndex;

// //        std::shared_ptr<Pattern> pattern;
//     bool shadow = true;
};

struct Shape {
  mat4 inverseTransform;
  Material material;
  vec4 data[6];
  int typeEnum;
};

struct NodeTLAS {
    vec4 first;
    vec4 second;
};

struct NodeBLAS {
    vec4 point1;
    vec4 point2;
    vec4 point3;
    vec4 normal1;
    vec4 normal2;
    vec4 normal3;
};


layout (binding = 1) uniform UBO 
{
  vec4 lightPos;
  Camera camera;
} ubo;

layout (std140, binding = 2) buffer Shapes
{
  Shape shapes[ ];
};

layout (std140, binding = 3) buffer Mesh
{
  mat4 inverseTransform;
  Material material;
  NodeBLAS nodes[];
} mesh;

layout (std140, binding = 4) buffer TLAS {
    mat4 inverseTransform;
    Material material;
    NodeTLAS TLAS[];
} tlas;

layout (std140, binding = 5) buffer BLAS {
    NodeBLAS BLAS[];
} blas;

void rayForPixel(in vec2 p, out vec4 rayO, out vec4 rayD) {
  float xOffset = (p.x + 0.5) * ubo.camera.pixelSize;
  float yOffset = (p.y + 0.5) * ubo.camera.pixelSize;

  float worldX = ubo.camera.halfWidth - xOffset;
  float worldY = ubo.camera.halfHeight - yOffset;

  vec4 pixel = ubo.camera.inverseTransform *
                     vec4(worldX, worldY, -1.0, 1.0);
  rayO = ubo.camera.inverseTransform * vec4(0.0, 0.0, 0.0, 1.0);
  rayD = normalize(pixel - rayO);
}

void transformRay(in mat4 m, in vec4 rayO, in vec4 rayD, out vec4 nRayO, out vec4 nRayD) {
  nRayO = m * rayO;
  nRayD = m * rayD;
}

float sphereIntersect(in vec4 rayO, in vec4 rayD) {
  vec4 sphereToRay = rayO - vec4(0.0, 0.0, 0.0, 1.0);
  float a = dot(rayD, rayD);
  float b = 2 * dot(rayD, sphereToRay);
  float c =
      dot(sphereToRay, sphereToRay) - 1.0;
  float discriminant = b * b - 4 * a * c;

  if (discriminant < 0)
    return -1.0;

  float t1 = (-b - sqrt(discriminant)) / (2.0 * a);
  float t2 = (-b + sqrt(discriminant)) / (2.0 * a);

  if (t1 < t2) {
    return t1;
  }
  return t2;
}

float planeIntersect(in vec4 rayO, in vec4 rayD) {
    if (abs(rayD.y) < EPSILON)
        return -1.0;

    return -rayO.y / rayD.y;
}

float triangleIntersect(in vec4 rayO, in vec4 rayD,in NodeBLAS triangle, out vec2 uv) {
    vec3 e1 = vec3(triangle.point2 - triangle.point1);
    vec3 e2 = vec3(triangle.point3 - triangle.point1);

    vec3 dirCrossE2 = cross(vec3(rayD), e2);
    float det = dot(e1, dirCrossE2);
    if (abs(det) < EPSILON) {
        return -1.0;
    }

    float f = 1.0 / det;
    vec3 p1ToOrigin = vec3(rayO - triangle.point1);
    uv.x = f * dot(p1ToOrigin, dirCrossE2);
    if (uv.x < 0 || uv.x > 1) {
      return -1.0;
    }

    vec3 originCrossE1 = cross(p1ToOrigin, e1);
    uv.y = f * dot(vec3(rayD), originCrossE1);
    if (uv.y < 0 || (uv.x + uv.y) > 1) {
        return -1.0;
    }
    return f * dot(e2, originCrossE1);
}


bool intersectAABB(in vec4 rayO, in vec4 rayD, in NodeTLAS aabb) {
  float t_min = -INFINITY;
  float t_max = INFINITY;
  float temp, invD, t0, t1;

  for (int a = 0; a < 3; a++)
  {
    invD = 1.0 / rayD[a];
    t0 = (aabb.first[a] - rayO[a]) * invD;
    t1 = (aabb.second[a] - rayO[a]) * invD;
    if (invD < 0.0) {
      temp = t0;
      t0 = t1;
      t1 = temp;
    }
      // std::swap(t0, t1);
    t_min = t0 > t_min ? t0 : t_min;
    t_max = t1 < t_max ? t1 : t_max;
    if (t_max <= t_min) {
      return false;
    }
  }
  return true;

  // float xmin, xmax, ymin, ymax, zmin, zmax;
  // checkAxis(rayO.x, rayD.x, aabb.first.x, aabb.second.x, xmin, xmax);
  // checkAxis(rayO.y, rayD.y, aabb.first.y, aabb.second.y, ymin, ymax);
  // checkAxis(rayO.z, rayD.z, aabb.first.z, aabb.second.z, zmin, zmax);

  // float tmin = max(max(xmin, ymin), zmin);
  // float tmax = min(min(xmax, ymax), zmax);

  // return !(tmin > tmax);
}

const int MAX_STACK_SIZE = 25;
struct Node {
  int level;
  int branch;
};

void push_stack(in Node node, inout Node[MAX_STACK_SIZE] stack, inout int top) {
  top += 1;
  stack[top] = node;
}

Node pop_stack(inout Node[MAX_STACK_SIZE] stack, inout int top) {
  Node ret = stack[top];
  top -= 1;
  return ret;
}

void intersectTLAS(in vec4 rayO, in vec4 rayD, out vec2 uv, inout float resT, inout int id) {
  // int level = 0;
  // int branch = 0;
  // int nodeIdx = 0;

  // int primitiveIndices[100];
  Node stack[MAX_STACK_SIZE];
  int topStack = -1;
  // int topPrimivitiveIndices = 0;
  Node nextNode = {0, 0};
  push_stack(nextNode,stack, topStack);

  while (topStack > -1) 
  {
    nextNode = pop_stack(stack, topStack);
    // nodeIdx = int(pow(2, nextNode.level))  - 1 + nextNode.branch;

    int firstChildIdx = int(pow(2, nextNode.level + 1)) - 1 + (nextNode.branch * 2);

    if (firstChildIdx < tlas.TLAS.length()) {
      if (intersectAABB(rayO, rayD, tlas.TLAS[firstChildIdx])) {
        Node newNode = {nextNode.level + 1, nextNode.branch * 2};
        push_stack(newNode, stack, topStack);
      }

      if (intersectAABB(rayO, rayD, tlas.TLAS[firstChildIdx + 1])) {
        Node newNode = {nextNode.level + 1, (nextNode.branch * 2) + 1};
        push_stack(newNode, stack, topStack);
      }
    }
    else {
      // primitiveIndices[topPrimivitiveIndices] = nextNode.branch * 2;
      // topPrimivitiveIndices += 1;
      float t1 = -1.0;
      float t2 = -1.0;
      int primIdx = nextNode.branch * 2;

      t1 = triangleIntersect(rayO, rayD, blas.BLAS[primIdx], uv);

      if (primIdx + 1 < blas.BLAS.length() && blas.BLAS[primIdx + 1].point1.w > 0.0) {
        t2 = triangleIntersect(rayO, rayD, blas.BLAS[primIdx + 1], uv);
      }

      if ((t1 > EPSILON) && (t1 < resT) && (t2 < 0 || (t1 < t2))) {
        id = -(primIdx + 2);
        resT = t1;
      }
      else if ((t2 > EPSILON) && (t2 < resT))
      {
        id = -(primIdx + 3);
        resT = t2;
      }
    }
  }

    // TODO fill another array with index values of BLAS array and loop over it in this next part
    

  // for (int i = 0; i < topPrimivitiveIndices; i++)
  // {    
  //   float t1 = -1.0;
  //   float t2 = -1.0;
  //   // id = -branch;

  //   t1 = triangleIntersect(rayO, rayD, blas.BLAS[primitiveIndices[i]], uv);

  //   if (primitiveIndices[i] + 1 < blas.BLAS.length() && blas.BLAS[primitiveIndices[i] + 1].point1.w > 0.0) {
  //     t2 = triangleIntersect(rayO, rayD, blas.BLAS[primitiveIndices[i] + 1], uv);
  //   }

  //   if ((t1 > EPSILON) && (t1 < resT) && (t2 < 0 || (t1 < t2))) {
  //     id = -primitiveIndices[i];
  //     resT = t1;
  //   }
  //   else if ((t2 > EPSILON) && (t2 < resT))
  //   {
  //     id = -(primitiveIndices[i] + 1);
  //     resT = t2;
  //   }
  // }
}

int intersect(in vec4 rayO, in vec4 rayD, inout float resT, out vec2 uv)
{
  int id = -1;
  vec4 nRayO, nRayD;
  float t = -1.0;

  for (int i = 0; i < shapes.length(); i++)
  {
    // vec4 nRayO, nRayD;
    transformRay(shapes[i].inverseTransform, rayO, rayD, nRayO, nRayD);
    
    if (shapes[i].typeEnum == 0) {
      t = sphereIntersect(nRayO, nRayD);
    }
    else if (shapes[i].typeEnum == 1) {
      t = planeIntersect(nRayO, nRayD);
    }
    // else if (shapes[i].typeEnum == 2) {
    //   t = triangleIntersect(nRayO, nRayD, shapes[i].data[0], shapes[i].data[1], shapes[i].data[2], uv);
    // }
    
    if ((t > EPSILON) && (t < resT))
    {
      id = i;
      resT = t;
    }
  } 
  
  // transformRay(mesh.inverseTransform, rayO, rayD, nRayO, nRayD);
  // for (int i = 0; i < mesh.nodes.length(); i++) {
  //   // float t = -1.0;
  //   t = triangleIntersect(nRayO, nRayD, mesh.nodes[i], uv);
  //   if ((t > EPSILON) && (t < resT))
  //   {
  //     id = -i; //TODO fix this hack, which is to differentiate with shapes. will fail at -1
  //     resT = t;
  //   }
  // }

  transformRay(tlas.inverseTransform, rayO, rayD, nRayO, nRayD);
  intersectTLAS(nRayO, nRayD, uv, resT, id);
  
  // for (int i = 0; i < tlas.TLAS.length(); i++) {
  //   // float t = -1.0;
  //   t = triangleIntersect(nRayO, nRayD, tlas.TLAS.nodes[i], uv);
  //   if ((t > EPSILON) && (t < resT))
  //   {
  //     id = -i; //TODO fix this hack, which is to differentiate with shapes. will fail at -1
  //     resT = t;
  //   }
  // }

  return id;
}

vec4 normalToWorld(in vec4 normal, in mat4 inverseTransform)
{
  vec4 ret = transpose(inverseTransform) * normal;
  ret.w = 0.0;
  ret = normalize(ret);

  return ret;
}

vec4 normalAt(in vec4 point, in mat4 inverseTransform, in int typeEnum, in vec4 n1, in vec4 n2, in vec4 n3, in vec2 uv) {
  vec4 n = vec4(0.0);
  vec4 objectPoint = inverseTransform * point; // World to object

  if (typeEnum == 0) {
    n = objectPoint - vec4(0.0, 0.0, 0.0, 1.0);
  }
  else if (typeEnum == 1) {
    n = vec4(0.0,1.0,0.0,0.0);
  }
  else if (typeEnum == 2) {
    n = n2 * uv.x + n3 * uv.y + n1 * (1.0 - uv.x - uv.y);
    n.w = 0.0;
  }
  return normalToWorld(n, inverseTransform);
}

struct HitParams {
  vec4 point;
  vec4 normalv;
  vec4 eyev;
  vec4 reflectv;
  vec4 overPoint;
  vec4 underPoint;
};

HitParams getHitParams(in vec4 rayO, in vec4 rayD, in float t, in mat4 inverseTransform, in int typeEnum, in vec4 n1, in vec4 n2, in vec4 n3, in vec2 uv)
{
  HitParams hitParams;
  hitParams.point =
      rayO + normalize(rayD) * t;
  // TODO check that uv only null have using none-uv normalAt version
  hitParams.normalv =
      normalAt(hitParams.point, inverseTransform, typeEnum, n1,n2,n3, uv);
  hitParams.eyev = -rayD;

  if (dot(hitParams.normalv, hitParams.eyev) < 0)
  {
    // intersection.comps->inside = true;
    hitParams.normalv = -hitParams.normalv;
  }
  // else
  // {
  //   intersection.comps->inside = false;
  // }

  hitParams.reflectv =
      reflect(rayD, hitParams.normalv);
  hitParams.overPoint =
      hitParams.point + hitParams.normalv * EPSILON;
  hitParams.underPoint =
      hitParams.point - hitParams.normalv * EPSILON;

  return hitParams;
}

bool isShadowed(in vec4 point, in vec4 lightPos)
{
  vec4 v = lightPos - point;
  float distance = length(v);
  vec4 direction = normalize(v);

  // Ray ray = Ray(point, direction);
  // std::vector<Geometry::Intersection<Shape>> intersections =
  //     world.intersectRayShadow(ray);

  // Geometry::Intersection<Shape> *hit = Geometry::hit<Shape>(intersections);
  float t = MAXLEN;
  vec2 uv;
  intersect(point, direction, t, uv);

  // if ((id >= 0 && t < distance))
  if (t > EPSILON && t < distance)
  {
    return true;
  }

  return false;
}

vec4 lighting(in Material material, in vec4 lightPos, in HitParams hitParams, in bool shadowed)
{
  // return material.colour;
  vec4 diffuse;
  vec4 specular;
  vec4 effectiveColour;

  vec4 intensity = vec4(1.0,1.0,1.0,1.0); // TODO temp placeholder

  effectiveColour = intensity * material.colour; //* light->intensity;

  vec4 ambient = effectiveColour * material.ambient;
  // vec4 ambient = vec4(0.3,0.0,0.0,1.0);
  if (shadowed) {
    return ambient;
  }

  vec4 lightv = normalize(lightPos - hitParams.overPoint);

  float lightDotNormal = dot(lightv, hitParams.normalv);
  if (lightDotNormal < 0)
  {
    diffuse = vec4(0.0, 0.0, 0.0,1.0);
    specular = vec4(0.0, 0.0, 0.0,1.0);
  }
  else
  {
    // compute the diffuse contribution​
    diffuse = effectiveColour * material.diffuse * lightDotNormal;

    // reflect_dot_eye represents the cosine of the angle between the
    // reflection vector and the eye vector. A negative number means the
    // light reflects away from the eye.​
    vec4 reflectv = reflect(-lightv, hitParams.normalv);
    float reflectDotEye = dot(reflectv, hitParams.eyev);

    if (reflectDotEye <= 0)
    {
      specular = vec4(0.0, 0.0, 0.0,1.0);
    }
    else
    {
      // compute the specular contribution​
      float factor = pow(reflectDotEye, material.shininess);
      specular = intensity * material.specular * factor;
    }
  }

  return (ambient + diffuse + specular);
}

vec4 renderScene(in vec4 rayO, in vec4 rayD)
{
  // int id = 0;
  vec4 color = vec4(0.0);
  vec2 uv;
  float t = MAXLEN;

  // Get intersected object ID
  int objectID = intersect(rayO, rayD, t, uv);
  
  if (t >= MAXLEN || objectID == -1)
  {
    return color;
  }
  
  // vec4 pos = rayO + t * rayD;
  // vec4 lightVec = normalize(ubo.lightPos - pos);       
  // vec3 normal;

  if (objectID >= 0) {
    for (int i = 0; i < shapes.length(); i++)
    {
      if (objectID == i)
      {
        HitParams hitParams = getHitParams(rayO, rayD, t, shapes[i].inverseTransform, shapes[i].typeEnum, shapes[i].data[3], shapes[i].data[4], shapes[i].data[5], uv);

        bool shadowed = isShadowed(hitParams.overPoint, ubo.lightPos);
        color = lighting(shapes[i].material, ubo.lightPos,
                                hitParams, shadowed);
        // color = vec4(1.0,0.0,0.0,1.0);
      }
    }
  }

  else {
      HitParams hitParams = getHitParams(rayO, rayD, t, tlas.inverseTransform, 2, blas.BLAS[-(objectID+2)].normal1, blas.BLAS[-(objectID+2)].normal2, blas.BLAS[-(objectID+2)].normal3, uv);

      bool shadowed = isShadowed(hitParams.overPoint, ubo.lightPos);
      color = lighting(tlas.material, ubo.lightPos,
                              hitParams, shadowed);
      // color = vec4(0.0,1.0,0.0,1.0);
  }



  // if (id == -1)
  //  return color;

  // id = objectID;

  // Shadows
  // t = length(ubo.lightPos - pos);
  // color *= calcShadow(pos, lightVec, id, t);
  
  // // Fog
  // color = fog(t, color); 
  
  // // Reflect ray for next render pass
  // reflectRay(rayD, normal);
  // rayO = pos;  
  
  return color;
}


void main() {

// debugPrintfEXT("TESTTESTTEST*******");
  /*
  In order to fit the work into workgroups, some unnecessary threads are launched.
  We terminate those threads here. 
  */
  if(gl_GlobalInvocationID.x >= ubo.camera.width || gl_GlobalInvocationID.y >= ubo.camera.height)
    return;

  // if (shapes.length() < 1) {
  // // if (ubo.camera.halfHeight > 0.0) {
  //   imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = vec4(1.0,0.0,0.0,1.0);
  //   return;
  // }

  // imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = vec4(ubo.lightPos,1.0);
  // return;

  vec4 rayO, rayD;

  rayForPixel(gl_GlobalInvocationID.xy, rayO, rayD);
    
  // Basic color path
  
  vec4 color = renderScene(rayO, rayD);


  // vec4 color = vec4(0.0,1.0,0.0,1.0);

          
  // store the rendered mandelbrot set into a storage buffer:
  // imageData[ubo.camera.width * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = color;
  imageStore(imageData, ivec2(gl_GlobalInvocationID.xy), color);
}

